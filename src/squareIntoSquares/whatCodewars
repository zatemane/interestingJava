
My little sister came back home from school with the following task: given a
 squared sheet of paper she has to cut it in pieces which, when assembled, give squares the sides of which
 form an increasing sequence of numbers. [Моя младшая сестра вернулась домой из школы со следующим заданием:
 ей дали квадратный лист бумаги и разрезали его на части, которые при сборке образуют квадраты, стороны которых
 образуют возрастающую последовательность чисел.] At the beginning it was lot of fun but little by little we were
 tired of seeing the pile of torn paper. [Поначалу было очень весело, но постепенно нам надоело видеть кучу рваной
 бумаги.] So we decided to write a program that could help us and protects trees. [Поэтому мы решили написать программу,
 которая могла бы помочь нам и защитить деревья.]


Task [задача]
Given a positive integral number n, return a strictly increasing sequence (list/array/string depending on the language)
of numbers, so that the sum of the squares is equal to n². [Учитывая положительное целое число n, вернуть строго
возрастающую последовательность чисел (список/массив/строку в зависимости от языка) так, чтобы сумма квадратов была равна n².]
If there are multiple solutions (and there will be), return as far as possible the result with the largest possible
values: [Если решений несколько (а они будут), верните по возможности результат с максимально возможными значениями:]


Examples [Примеры]
decompose(11) must return [1,2,4,10]. [decompose(11) должен возвращать [1,2,4,10].] Note that there
are actually two ways to decompose 11², 11² = 121 = 1 + 4 + 16 + 100 = 1² + 2² + 4² + 10² but don't
return [2,6,9], since 9 is smaller than 10. [Обратите внимание, что на самом деле существует два способа
разложения 11²: 11² = 121 = 1 + 4 + 16 + 100 = 1² + 2² + 4² + 10², но не возвращайте [2,6,9], поскольку 9 меньше 10.]
For decompose(50) don't return [1, 1, 4, 9, 49] but [1, 3, 5, 8, 49] since [1, 1, 4, 9, 49] doesn't form a
strictly increasing sequence. [Для decompose(50) возвращайте не [1, 1, 4, 9, 49], а [1, 3, 5, 8, 49],
поскольку [1, 1, 4, 9, 49] не образуют строго возрастающая последовательность.]


Note [примечание]
Neither [n] nor [1,1,1,…,1] are valid solutions. [Ни [n], ни [1,1,1,…,1] не являются
допустимыми решениями.] If no valid solution exists, return nil, null, Nothing,
None (depending on the language) or "[]" (C) ,{} (C++), [] (Swift, Go). [Если допустимого
решения не существует, верните nil, null, Nothing, None (в зависимости от языка) или «[]» (C), {} (C++), [] (Swift, Go).]
The function "decompose" will take a positive integer n and return the decomposition of N = n² as:
[Функция «decompose» примет положительное целое число n и вернет разложение N = n² как:]
[x1 ... xk] or [[x1...xk] или]
"x1 ... xk" or [«х1...хк» или]
Just [x1 ... xk] or [Просто [x1...xk] или]
Some [x1 ... xk] or [Некоторые [x1...xk] или]
{x1 ... xk} or [{x1 ... xk} или]
"[x1,x2, ... ,xk]" [«[x1,x2, ... ,xk]»]
depending on the language (see "Sample tests") [в зависимости от языка (см. «Примеры тестов»)]


Note for Bash [Примечание для Баша]
decompose 50 returns "1,3,5,8,49" [разложить 50 возвращает '1,3,5,8,49']
decompose 4  returns "Nothing" [разложить 4 возвращает «Ничего»]