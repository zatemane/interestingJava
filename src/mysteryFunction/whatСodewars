The mystery function is defined over the non-negative integers. The more common name of this function is concealed in order
to not tempt you to search the Web for help in solving this kata, which most definitely would be a very dishonorable thing to do.

Assume n has m bits. Then mystery(n) is the number whose binary representation is the entry in the table T(m) at index
position n, where T(m) is defined recursively as follows:

T(1) = [0, 1]
T(m + 1) is obtained by taking two copies of T(m), reversing the second copy, prepending each entry of
the first copy with 0 and each entry of the reversed copy with 1, and then concatenating the two. For example:

T(2) = [ 00, 01, 11, 10 ]
and

T(3) = [ 000, 001, 011, 010, 110, 111, 101, 100 ]
mystery(6) is the entry in T(3) at index position 6 (with indexing starting at 0), i.e., 101 interpreted as a binary number. So, mystery(6) returns 5.

Your mission is to implement the function mystery, where the argument may have up to 63 bits.
Note that T(63) is far too large to compute and store, so you'll have to find an alternative way of implementing mystery.

You are also asked to implement mystery_inv ( or mysteryInv ), the inverse of mystery. Finally, you are
asked to implement a function name_of_mystery ( or nameOfMystery ), which shall return the name that mystery is more commonly known as.
After passing all tests you are free to learn more about this function on Wikipedia or another place.

Hint: If you don't know the name of mystery, remember there is information in passing as well as failing a test.

//на русском

Функция mystery определена для целых неотрицательных чисел. Более распространенное название этой функции скрыто,
чтобы не заставлять вас искать в Интернете помощь в решении этой задачи, что, безусловно, было бы очень неблаговидным поступком.

Предположим, что n содержит m бит. Тогда mystery(n) - это число, двоичным представлением которого является запись
в таблице T(m) в позиции индекса n, где T(m) определяется рекурсивно следующим образом:

T(1) = [0, 1]
T(m + 1) получается путем взятия двух копий T(m), переворачивания второй копии, добавления перед каждой
записью первой копии 0 и перед каждой записью перевернутой копии 1, а затем объединения этих двух значений. Например:

Т(2) = [ 00, 01, 11, 10 ]
и
Т(3) = [ 000, 001, 011, 010, 110, 111, 101, 100 ]

загадка(6) - это запись в T(3) в позиции индекса 6 (индексация начинается с 0), т.е. 101 интерпретируется
как двоичное число. Итак, загадка(6) возвращает 5.

Ваша задача - реализовать функцию mystery, в которой аргумент может содержать до 63 бит. Обратите внимание,
что значение T(63) слишком велико для вычисления и хранения, поэтому вам придется найти альтернативный способ реализации mystery.

Вас также попросят реализовать mystery_inv ( или mysteryinvвход ), обратный mystery. Наконец, вас попросят реализовать
функцию name_of_mystery ( или nameOfMystery ), которая должна возвращать имя, более известное как mystery.
После прохождения всех тестов вы можете узнать больше об этой функции в Википедии или другом месте.

Подсказка: Если вы не знаете названия mystery, помните, что есть информация о прохождении теста, а также о его провале.